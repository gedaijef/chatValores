import os
import openai
import dotenv
import time
openai.api_key = "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"
import tiktoken

def num_tokens_from_string(string: str, encoding_name: str) -> int:
    """Returns the number of tokens in a text string."""
    encoding = tiktoken.get_encoding(encoding_name)
    num_tokens = len(encoding.encode(string))
    return num_tokens

def identificaArquivo(prompt_usuario):
    try:
        global prompt_sistema_identificaArquivo
        prompt_sistema_identificaArquivo = '''
        # Contexto
    - Voc√™ √© uma etapa de um chatbot, basicamente o usu√°rio faz uma requisi√ß√£o sobre a cultura do Grupo J&F e o chatbot ir√° retornar uma resposta. E a fun√ß√£o que voc√™ est√° encarregado √© retornar o nome de um dos arquivos que mais se relacione com a solicita√ß√£o do usu√°rio.

    # Miss√£o
    - Sua miss√£o √© entender a solicita√ß√£o do usu√°rio e fazer conex√µes com os arquivos. √â de extrema import√¢ncia que haja um racioc√≠nio nas conex√µes porque, ao retornar o nome do arquivo, voc√™ estar√° indicando que este arquivo ser√° suficiente para sanar a solicita√ß√£o, j√° que dentro do arquivo se apresenta um resumo do tema citado no t√≠tulo.

    # Instru√ß√µes
    - √â de extrema import√¢ncia que voc√™ retorne apenas o nome do arquivo, porque sua resposta ser√° utilizada num c√≥digo que ir√° usar o arquivo, e para que n√£o ocorra nenhum erro, √© preciso que s√≥ se retorne o nome do arquivo.

    # Arquivos:
    - S√£o  arquivos, abordando os temas dos valores da empresa J&F.
    - Por√©m tem um arquivo geral com um resumo de todos os valores, muito √∫til para PERGUNTAS MAIS ABERTAS al√©m de PERGUNTAS QUE SE RELACIONAM com DOIS OU MAIS valores. Segue o nome dos arquivos:

    Humildade.txt;
    AtitudeDeDono.txt;
    Determinacao.txt;
    Disciplina.txt;
    Disponibilidade.txt;
    Franqueza.txt;
    Simplicidade.txt;
    Geral.txt;

    # Exemplo 1
    - Usu√°rio: "Estou com dificuldade de indentificar os valores que me faltam, eu ando muito desanimado porem ainda nao conversei com ninguem para me ajudar."
    - ChatBot: "Geral.txt"
    # Exemplo 2
    - Usu√°rio: "Preciso de ajuda para melhorar minha franqueza. As pessoas reclamam de como abordo elas. Como posso melhorar?"
    - ChatBot: "Franqueza.txt"
    '''

        tentativas = 0
        tempo_de_espera = 5
        while tentativas <3:
            tentativas+=1
            print(f"Tentativa {tentativas}")
            try:
                print(f"Iniciando a an√°lise")
                resposta = openai.ChatCompletion.create(
                    model = "gpt-4-0125-preview",
                    messages = [
                        {
                            "role": "system",
                            "content": prompt_sistema_identificaArquivo
                        },
                        {
                            "role": "user",
                            "content": prompt_usuario
                        }
                    ],
                    temperature=0.7,
                    max_tokens=100,
                    top_p=1,
                    frequency_penalty=0,
                    presence_penalty=0,
                )
                
                print("An√°lise realizada com sucesso")
                return "C:/Users/arthurdomingos-ieg/OneDrive - Instituto Germinare/√Årea de Trabalho/GEDAI/projetoValores/Dados/"+resposta.choices[0].message.content
            except openai.error.AuthenticationError as e:
                print(f"Erro de autentifica√ß√£o {e}")
            except openai.error.APIError as e:
                print(f"Erro de API {e}")
                time.sleep(5)
            except openai.error.RateLimitError as e:
                print(f"Erro de limite de taxa: {e}")
                time.sleep(tempo_de_espera)
                tempo_de_espera *=2
    except:
        print("ERROR")
        



#
def carrega(nome_do_arquivo):
    try:
        if ('"' in nome_do_arquivo):
            nome_do_arquivo = nome_do_arquivo.replace('"', '')
        with open(nome_do_arquivo, "r", encoding="utf-8") as arquivo:
            
            dados = arquivo.read()
            return dados
    except IOError as e:
        print(f"Erro no carregamento de arquivo: {e}")
        return nome_do_arquivo

#
def respostaApi(prompt_usuario,dadosArquivo, prompt_sistema):   
    prompt_sistema = prompt_sistema +'\n# Base De Dados"""' + dadosArquivo + '""""""'
    print(prompt_sistema)
    tentativas = 0
    tempo_de_espera = 5
    while tentativas <3:
        tentativas+=1
        print(f"Tentativa {tentativas}")
        try:
            print(f"Iniciando a an√°lise")
            resposta = openai.ChatCompletion.create(
                model = "gpt-4-0125-preview",
                messages = [
                    {
                        "role": "system",
                        "content": prompt_sistema
                    },
                    {
                        "role": "user",
                        "content": prompt_usuario
                    }
                ],
                temperature=1,
                max_tokens=2000,
                top_p=1,
                frequency_penalty=0,
                presence_penalty=0,
            )
            
            print("Resposta feita com sucesso")
            return resposta.choices[0].message.content
        except openai.error.AuthenticationError as e:
            print(f"Erro de autentifica√ß√£o {e}")
        except openai.error.APIError as e:
            print(f"Erro de API {e}")
            time.sleep(5)
        except openai.error.RateLimitError as e:
            print(f"Erro de limite de taxa: {e}")
            time.sleep(tempo_de_espera)
            tempo_de_espera *=2




#######
         

prompt_sistema_respostaApi = f'''
    # Contexto

- Voc√™ √© um chatbot especializado na cultura do Grupo J&F, possuindo amplo conhecimento sobre seus valores, miss√µes, cren√ßas, entre outros. Seu linguajar √© natural e apropriado.

# Miss√£o

- Sua miss√£o √© compreender as solicita√ß√µes do usu√°rio e fornecer respostas que agreguem valor, esclare√ßam d√∫vidas ou respondam a afirma√ß√µes de maneira construtiva.

# Instru√ß√µes

- A FORMATA√á√ÉO DA RESPOSTA DEVE SER EM LISTA E SUB-LISTAS
- Compreenda detalhadamente a solicita√ß√£o do usu√°rio, associe-a √† cultura do Grupo J&F. Seja claro na resposta e evite usar muitos tokens. Aborde esta tarefa metodicamente, sem pressa e sem pular etapas.
- RESPONDA SOMENTE SE ESTIVER RELACIONADO A ISSO. Qualquer outra solicita√ß√£o ser√° respondida com esta mensagem que explica o porqu√™ de n√£o poder esclarecer.MENSAGEM: "Por favor insira mais detalhes de sua solicita√ß√£o por conta que"[COMPLEMENTE COM O PORQUE DO N√ÉO PODER RESPONDER].

# Exemplo

- Usu√°rio: "meu colega me excluiu de um trabalho em grupo, no que ele deve melhorar e o que devo falar para ele?"
- ChatBot: "üîç Para Melhorar: Seu colega pode focar em:

Trabalho em Equipe ü§ù: Reconhecer a import√¢ncia de incluir todos e trabalhar juntos, respeitando a contribui√ß√£o de cada um.
Compromisso com o Grupo üåü: Entender que o sucesso do grupo depende da participa√ß√£o e colabora√ß√£o de todos.
üó£Ô∏è O que Dizer:

Expresse Seus Sentimentos üí¨: Diga como se sentiu exclu√≠do e a import√¢ncia de trabalhar juntos.
Valores do Instituto Germinare üè´: Lembre-o de que a atitude de dono inclui comprometimento com o grupo e colabora√ß√£o.
Crescimento Conjunto üìà: Enfatize que todos no grupo t√™m algo valioso a contribuir para o sucesso coletivo.
Espero que isso ajude a melhorar a din√¢mica do grupo! üåü"

#Base De Dados
"""
'''


# Segunda parte, HISTORICO

#Variavieis globais   
variavelGlobal = 0
listaHistorico = ["","",""]


from flask import Flask, render_template, request, redirect, jsonify

app = Flask(__name__)

@app.route('/')

def index():
    return render_template('index.html')

#Todo projeto ser√° acionado no submite do usuario
@app.route('/submit',methods = ['POST'])


def submit():
    try:
        print("-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=")
        print("0")
        global variavelGlobal
        global prompt_sistema_respostaApi
        global listaHistorico
        if(variavelGlobal == 0):
            variavel = request.form['inputMessage']

            print(variavel)
            #Api GPT
            variavel = variavel+" Al√©m de tudo isso, para tornar a mensagem mais interativa, insira emojis relacionados com a sua resposta."
            respostaIdentificaArquivo = identificaArquivo(variavel)

            dadosArquivo = carrega(respostaIdentificaArquivo)

            resposta = respostaApi(variavel,dadosArquivo,prompt_sistema_respostaApi)
            variavelGlobal=variavelGlobal+1
            listaHistorico[variavelGlobal] = f"""#CONVERSA ANTERIOR {variavelGlobal}
    -Solicita√ß√£o anterior do usu√°rio:
    {variavel}
    -Resposta anterior:
    {resposta}
    """
            prompt_sistema_respostaApi = f'''
        # Contexto

        - Voc√™ √© um chatbot especializado na cultura do Grupo J&F, possuindo amplo conhecimento sobre seus valores, miss√µes, cren√ßas, entre outros. Seu linguajar √© natural e apropriado.
        - Voc√™ est√° aqui porque foi solicitado pelo usu√°rio a ativa√ß√£o do hist√≥rico do chat. Assim, voc√™ possui todas as informa√ß√µes necess√°rias das √∫ltimas conversas e sobre a nova solicita√ß√£o do usu√°rio. Voc√™ deve fazer uma resposta embasada nas √∫ltimas informa√ß√µes da conversa.

        # Miss√£o

        - Sua miss√£o √© compreender as solicita√ß√µes do usu√°rio e fornecer respostas que agreguem valor, esclare√ßam d√∫vidas ou respondam a afirma√ß√µes de maneira construtiva.

        # Instru√ß√µes

        - A FORMATA√á√ÉO DA RESPOSTA DEVE SER EM LISTA E SUB-LISTAS
        - Compreenda detalhadamente a solicita√ß√£o do usu√°rio, associe-a √† cultura do Grupo J&F e RESPONDA SOMENTE SE ESTIVER RELACIONADO A ISSO. Qualquer outra solicita√ß√£o ser√° respondida com uma mensagem explicando o porqu√™ de n√£o poder esclarecer ou se achar que a resposta apenas precisa de mais detalhes, pe√ßa para o usuario dar mais informa√ß√µes sobre sua solicita√ß√£o. SEJA CLARO NA RESPOSTA E EVITE USAR MUITOS TOKENS. Aborde esta tarefa metodicamente, sem pressa e sem pular etapas.
        - Al√©m disso, para tornar a mensagem mais interativa, insira EMOJIS relacionados √† sua resposta.
        '''
            #Api GPT
            # Passa a vari√°vel para o template HTML
            # return render_template('index.html', variavel_frontend=resposta)
            return jsonify({'resposta': resposta})
        elif(variavelGlobal == 1):
            print("1")

            variavel = request.form['inputMessage']

            print(variavel)
            #Api GPT
            variavel = variavel+" Al√©m de tudo isso, para tornar a mensagem mais interativa, insira emojis relacionados com a sua resposta."
            respostaIdentificaArquivo = identificaArquivo(variavel)

            dadosArquivo = carrega(respostaIdentificaArquivo)

            # prompt_sistema_respostaApi += listaHistorico[variavelGlobal] + listaHistorico[variavelGlobal+1]

            resposta = respostaApi(variavel,dadosArquivo,prompt_sistema_respostaApi+listaHistorico[variavelGlobal] + listaHistorico[variavelGlobal+1])
            variavelGlobal = variavelGlobal+1
            listaHistorico[variavelGlobal] = f'''#CONVERSA ANTERIOR {variavelGlobal}
    -Solicita√ß√£o anterior do usu√°rio:
    {variavel}
    -SUA RESPOSTA PARA A SOLICITA√á√ÉO:
    {resposta}
    """
    '''
            #Api GPT
            # Passa a vari√°vel para o template HTML
            # return render_template('index.html', variavel_frontend=resposta)
            return jsonify({'resposta': resposta})

        else:
            print("2")

            variavel = request.form['inputMessage']

            print(variavel)
            #Api GPT
            variavel = variavel+" Al√©m de tudo isso, para tornar a mensagem mais interativa, insira emojis relacionados com a sua resposta."
            respostaIdentificaArquivo = identificaArquivo(variavel)
            
            dadosArquivo = carrega(respostaIdentificaArquivo)
            
            resposta = respostaApi(variavel,dadosArquivo,prompt_sistema_respostaApi+listaHistorico[variavelGlobal] + listaHistorico[variavelGlobal-1])
            variavelGlobal = variavelGlobal-1
            listaHistorico[variavelGlobal] = f'''#CONVERSA ANTERIOR {variavelGlobal}
    -Solicita√ß√£o anterior do usu√°rio:
    {variavel}
    -Resposta anterior:
    {resposta}
    """
    '''
            #Api GPT
            # Passa a vari√°vel para o template HTML
            # return render_template('index.html', variavel_frontend=resposta)
            return jsonify({'resposta': resposta})

    except:
        return render_template('index.html', variavel_frontend="ERROR")

app.run(debug=True)


