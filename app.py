import funcoes_OpenAi

prompt_sistema_resposta_api = f'''
    # Contexto

- Voc√™ √© um chatbot especializado na cultura do Grupo J&F, possuindo amplo conhecimento sobre seus valores, miss√µes, cren√ßas, entre outros. Seu linguajar √© natural e apropriado.

# Miss√£o

- Sua miss√£o √© compreender as solicita√ß√µes do usu√°rio e fornecer respostas que agreguem valor, esclare√ßam d√∫vidas ou respondam a afirma√ß√µes de maneira construtiva.

# Instru√ß√µes

- A FORMATA√á√ÉO DA RESPOSTA DEVE SER EM LISTA E SUB-LISTAS
- Compreenda detalhadamente a solicita√ß√£o do usu√°rio, associe-a √† cultura do Grupo J&F. Seja claro na resposta e evite usar muitos tokens. Aborde esta tarefa metodicamente, sem pressa e sem pular etapas.
- RESPONDA SOMENTE SE ESTIVER RELACIONADO A ISSO. Qualquer outra solicita√ß√£o ser√° respondida com esta mensagem que explica o porqu√™ de n√£o poder esclarecer.MENSAGEM: "Por favor insira mais detalhes de sua solicita√ß√£o por conta que"[COMPLEMENTE COM O PORQUE DO N√ÉO PODER RESPONDER].
- Al√©m de tudo isso, para tornar a mensagem mais interativa, insira emojis relacionados com a sua resposta.

# Exemplo

- Usu√°rio: "meu colega me excluiu de um trabalho em grupo, no que ele deve melhorar e o que devo falar para ele?"
- ChatBot: "üîç Para Melhorar: Seu colega pode focar em:

TRABALHO EM EQUIPE ü§ù: Reconhecer a import√¢ncia de incluir todos e trabalhar juntos, respeitando a contribui√ß√£o de cada um.
COMPROMISSO COM O GRUPO üåü: Entender que o sucesso do grupo depende da participa√ß√£o e colabora√ß√£o de todos.
üó£Ô∏è O que Dizer:

EXPRESSE SEUS SENTIMENTOS üí¨: Diga como se sentiu exclu√≠do e a import√¢ncia de trabalhar juntos.
VALORES DO INSTITUTO GERMINARE üè´: Lembre-o de que a atitude de dono inclui comprometimento com o grupo e colabora√ß√£o.
CRESCIMENTO CONJUNTO üìà: Enfatize que todos no grupo t√™m algo valioso a contribuir para o sucesso coletivo.
Espero que isso ajude a melhorar a din√¢mica do grupo! üåü"

#Base De Dados
"""
'''

# Segunda parte, HISTORICO

#Variavieis globais   
cont_requisicao = 0
lista_historico = ["","",""]

from flask import Flask, render_template, request, redirect, jsonify

app = Flask(__name__)

@app.route('/')

def index():
    return render_template('index.html')

#Todo projeto ser√° acionado no submite do usuario
@app.route('/submit',methods = ['POST'])

def submit():
    try:
        print("-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=")
        print("0")
        global cont_requisicao
        global prompt_sistema_resposta_api
        global lista_historico
        if(cont_requisicao == 0):
        
            pergunta_usuario = request.form['inputMessage']

            print(pergunta_usuario)
            #Api GPT
            pergunta_usuario = pergunta_usuario+" Al√©m de tudo isso, para tornar a mensagem mais interativa, insira emojis relacionados com a sua resposta."
            resposta_identifica_arquivo = funcoes_OpenAi.identifica_arquivo(pergunta_usuario)

            dados_arquivo = funcoes_OpenAi.carrega(resposta_identifica_arquivo)

            resposta = funcoes_OpenAi.respostaApi(pergunta_usuario,dados_arquivo,prompt_sistema_resposta_api)
            cont_requisicao=cont_requisicao+1
            lista_historico[cont_requisicao] = f"""#CONVERSA ANTERIOR {cont_requisicao}
    -Solicita√ß√£o anterior do usu√°rio:
    {pergunta_usuario}
    -Resposta anterior:
    {resposta}
    """
            prompt_sistema_resposta_api = f'''
        # Contexto

        - Voc√™ √© um chatbot especializado na cultura do Grupo J&F, possuindo amplo conhecimento sobre seus valores, miss√µes, cren√ßas, entre outros. Seu linguajar √© natural e apropriado.
        - Voc√™ est√° aqui porque foi solicitado pelo usu√°rio a ativa√ß√£o do hist√≥rico do chat. Assim, voc√™ possui todas as informa√ß√µes necess√°rias das √∫ltimas conversas e sobre a nova solicita√ß√£o do usu√°rio. Voc√™ deve fazer uma resposta embasada nas √∫ltimas informa√ß√µes da conversa.

        # Miss√£o

        - Sua miss√£o √© compreender as solicita√ß√µes do usu√°rio e fornecer respostas que agreguem valor, esclare√ßam d√∫vidas ou respondam a afirma√ß√µes de maneira construtiva.

        # Instru√ß√µes

        - A FORMATA√á√ÉO DA RESPOSTA DEVE SER EM LISTA E SUB-LISTAS
        - Compreenda detalhadamente a solicita√ß√£o do usu√°rio, associe-a √† cultura do Grupo J&F e RESPONDA SOMENTE SE ESTIVER RELACIONADO A ISSO. Qualquer outra solicita√ß√£o ser√° respondida com uma mensagem explicando o porqu√™ de n√£o poder esclarecer ou se achar que a resposta apenas precisa de mais detalhes, pe√ßa para o usuario dar mais informa√ß√µes sobre sua solicita√ß√£o. SEJA CLARO NA RESPOSTA E EVITE USAR MUITOS TOKENS. Aborde esta tarefa metodicamente, sem pressa e sem pular etapas.
        - Al√©m disso, para tornar a mensagem mais interativa, insira EMOJIS relacionados √† sua resposta.
        
        '''
            #Api GPT
            # Passa a vari√°vel para o template HTML
            # return render_template('index.html', variavel_frontend=resposta)
            resposta = resposta.replace("*","")
            return jsonify({'resposta': resposta})
        elif(cont_requisicao == 1):
            print("1")

            pergunta_usuario = request.form['inputMessage']

            print(pergunta_usuario)
            #Api GPT
            pergunta_usuario = pergunta_usuario+" Al√©m de tudo isso, para tornar a mensagem mais interativa, insira emojis relacionados com a sua resposta."
            resposta_identifica_arquivo = funcoes_OpenAi.identifica_arquivo(pergunta_usuario)

            dados_arquivo = funcoes_OpenAi.carrega(resposta_identifica_arquivo)

            # prompt_sistema_respostaApi += listaHistorico[variavelGlobal] + listaHistorico[variavelGlobal+1]
            
            resposta = funcoes_OpenAi.respostaApi(pergunta_usuario,dados_arquivo,prompt_sistema_resposta_api+lista_historico[cont_requisicao] + lista_historico[cont_requisicao+1])
            cont_requisicao = cont_requisicao+1
            lista_historico[cont_requisicao] = f'''#CONVERSA ANTERIOR {cont_requisicao}
    -Solicita√ß√£o anterior do usu√°rio:
    {pergunta_usuario}
    -SUA RESPOSTA PARA A SOLICITA√á√ÉO:
    {resposta}
    """
    '''
            #Api GPT
            # Passa a vari√°vel para o template HTML
            # return render_template('index.html', variavel_frontend=resposta)
            resposta = resposta.replace("*","")
            return jsonify({'resposta': resposta})

        else:
            print("2")

            pergunta_usuario = request.form['inputMessage']

            print(pergunta_usuario)
            #Api GPT
            pergunta_usuario = pergunta_usuario
            resposta_identifica_arquivo = funcoes_OpenAi.identifica_arquivo(pergunta_usuario)
            
            dados_arquivo = funcoes_OpenAi.carrega(resposta_identifica_arquivo)
            
            resposta = funcoes_OpenAi.respostaApi(pergunta_usuario,dados_arquivo,prompt_sistema_resposta_api+lista_historico[cont_requisicao] + lista_historico[cont_requisicao-1])
            cont_requisicao = cont_requisicao-1
            lista_historico[cont_requisicao] = f'''#CONVERSA ANTERIOR {cont_requisicao}
    -Solicita√ß√£o anterior do usu√°rio:
    {pergunta_usuario}
    -Resposta anterior:
    {resposta}
    """
    '''
            #Api GPT
            # Passa a vari√°vel para o template HTML
            # return render_template('index.html', variavel_frontend=resposta)
            resposta = resposta.replace("*","")
            return jsonify({'resposta': resposta})

    except:
        
        return jsonify({'resposta': 'Algo ocoorreu de errado, tente novamente'})

app.run(debug=True)
